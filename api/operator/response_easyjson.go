// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package operator

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator(in *jlexer.Lexer, out *ErrorMessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator(out *jwriter.Writer, in ErrorMessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorMessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorMessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator(l, v)
}
func easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator1(in *jlexer.Lexer, out *EigenNodeServicesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make([]EigenNodeService, 0, 1)
					} else {
						out.Services = []EigenNodeService{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v1 EigenNodeService
					(v1).UnmarshalEasyJSON(in)
					out.Services = append(out.Services, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator1(out *jwriter.Writer, in EigenNodeServicesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"services\":"
		out.RawString(prefix[1:])
		if in.Services == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Services {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EigenNodeServicesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EigenNodeServicesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator1(l, v)
}
func easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator2(in *jlexer.Lexer, out *EigenNodeService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "status":
			out.Status = ServiceStatusType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator2(out *jwriter.Writer, in EigenNodeService) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EigenNodeService) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EigenNodeService) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator2(l, v)
}
func easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator3(in *jlexer.Lexer, out *EigenNodeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node_name":
			out.NodeName = string(in.String())
		case "spec_version":
			out.SpecVersion = string(in.String())
		case "node_version":
			out.NodeVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator3(out *jwriter.Writer, in EigenNodeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.NodeName))
	}
	{
		const prefix string = ",\"spec_version\":"
		out.RawString(prefix)
		out.String(string(in.SpecVersion))
	}
	{
		const prefix string = ",\"node_version\":"
		out.RawString(prefix)
		out.String(string(in.NodeVersion))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EigenNodeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComDittonetworkExecutorAvsApiOperator3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EigenNodeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComDittonetworkExecutorAvsApiOperator3(l, v)
}
