// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	models "github.com/dittonetwork/executor-avs/cmd/operator/internal/models"

	types "github.com/ethereum/go-ethereum/core/types"
)

// DittoEntryPoint is an autogenerated mock type for the DittoEntryPoint type
type DittoEntryPoint struct {
	mock.Mock
}

type DittoEntryPoint_Expecter struct {
	mock *mock.Mock
}

func (_m *DittoEntryPoint) EXPECT() *DittoEntryPoint_Expecter {
	return &DittoEntryPoint_Expecter{mock: &_m.Mock}
}

// ActivateExecutor provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) ActivateExecutor(ctx context.Context) (*types.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ActivateExecutor")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_ActivateExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateExecutor'
type DittoEntryPoint_ActivateExecutor_Call struct {
	*mock.Call
}

// ActivateExecutor is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) ActivateExecutor(ctx interface{}) *DittoEntryPoint_ActivateExecutor_Call {
	return &DittoEntryPoint_ActivateExecutor_Call{Call: _e.mock.On("ActivateExecutor", ctx)}
}

func (_c *DittoEntryPoint_ActivateExecutor_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_ActivateExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_ActivateExecutor_Call) Return(_a0 *types.Transaction, _a1 error) *DittoEntryPoint_ActivateExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_ActivateExecutor_Call) RunAndReturn(run func(context.Context) (*types.Transaction, error)) *DittoEntryPoint_ActivateExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// ArrangeExecutors provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) ArrangeExecutors(ctx context.Context) (*types.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ArrangeExecutors")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_ArrangeExecutors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArrangeExecutors'
type DittoEntryPoint_ArrangeExecutors_Call struct {
	*mock.Call
}

// ArrangeExecutors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) ArrangeExecutors(ctx interface{}) *DittoEntryPoint_ArrangeExecutors_Call {
	return &DittoEntryPoint_ArrangeExecutors_Call{Call: _e.mock.On("ArrangeExecutors", ctx)}
}

func (_c *DittoEntryPoint_ArrangeExecutors_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_ArrangeExecutors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_ArrangeExecutors_Call) Return(_a0 *types.Transaction, _a1 error) *DittoEntryPoint_ArrangeExecutors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_ArrangeExecutors_Call) RunAndReturn(run func(context.Context) (*types.Transaction, error)) *DittoEntryPoint_ArrangeExecutors_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateOperatorAVSRegistrationDigestHash provides a mock function with given fields: ctx, address, salt, expiry
func (_m *DittoEntryPoint) CalculateOperatorAVSRegistrationDigestHash(ctx context.Context, address common.Address, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	ret := _m.Called(ctx, address, salt, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CalculateOperatorAVSRegistrationDigestHash")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, [32]byte, *big.Int) ([32]byte, error)); ok {
		return rf(ctx, address, salt, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, [32]byte, *big.Int) [32]byte); ok {
		r0 = rf(ctx, address, salt, expiry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, [32]byte, *big.Int) error); ok {
		r1 = rf(ctx, address, salt, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateOperatorAVSRegistrationDigestHash'
type DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call struct {
	*mock.Call
}

// CalculateOperatorAVSRegistrationDigestHash is a helper method to define mock.On call
//   - ctx context.Context
//   - address common.Address
//   - salt [32]byte
//   - expiry *big.Int
func (_e *DittoEntryPoint_Expecter) CalculateOperatorAVSRegistrationDigestHash(ctx interface{}, address interface{}, salt interface{}, expiry interface{}) *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call {
	return &DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call{Call: _e.mock.On("CalculateOperatorAVSRegistrationDigestHash", ctx, address, salt, expiry)}
}

func (_c *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call) Run(run func(ctx context.Context, address common.Address, salt [32]byte, expiry *big.Int)) *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address), args[2].([32]byte), args[3].(*big.Int))
	})
	return _c
}

func (_c *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call) Return(_a0 [32]byte, _a1 error) *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call) RunAndReturn(run func(context.Context, common.Address, [32]byte, *big.Int) ([32]byte, error)) *DittoEntryPoint_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateExecutor provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) DeactivateExecutor(ctx context.Context) (*types.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateExecutor")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_DeactivateExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateExecutor'
type DittoEntryPoint_DeactivateExecutor_Call struct {
	*mock.Call
}

// DeactivateExecutor is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) DeactivateExecutor(ctx interface{}) *DittoEntryPoint_DeactivateExecutor_Call {
	return &DittoEntryPoint_DeactivateExecutor_Call{Call: _e.mock.On("DeactivateExecutor", ctx)}
}

func (_c *DittoEntryPoint_DeactivateExecutor_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_DeactivateExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_DeactivateExecutor_Call) Return(_a0 *types.Transaction, _a1 error) *DittoEntryPoint_DeactivateExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_DeactivateExecutor_Call) RunAndReturn(run func(context.Context) (*types.Transaction, error)) *DittoEntryPoint_DeactivateExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActiveWorkflows provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) GetAllActiveWorkflows(ctx context.Context) ([]models.Workflow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllActiveWorkflows")
	}

	var r0 []models.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Workflow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Workflow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_GetAllActiveWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActiveWorkflows'
type DittoEntryPoint_GetAllActiveWorkflows_Call struct {
	*mock.Call
}

// GetAllActiveWorkflows is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) GetAllActiveWorkflows(ctx interface{}) *DittoEntryPoint_GetAllActiveWorkflows_Call {
	return &DittoEntryPoint_GetAllActiveWorkflows_Call{Call: _e.mock.On("GetAllActiveWorkflows", ctx)}
}

func (_c *DittoEntryPoint_GetAllActiveWorkflows_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_GetAllActiveWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_GetAllActiveWorkflows_Call) Return(_a0 []models.Workflow, _a1 error) *DittoEntryPoint_GetAllActiveWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_GetAllActiveWorkflows_Call) RunAndReturn(run func(context.Context) ([]models.Workflow, error)) *DittoEntryPoint_GetAllActiveWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// GetAmountExecutors provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) GetAmountExecutors(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAmountExecutors")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_GetAmountExecutors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAmountExecutors'
type DittoEntryPoint_GetAmountExecutors_Call struct {
	*mock.Call
}

// GetAmountExecutors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) GetAmountExecutors(ctx interface{}) *DittoEntryPoint_GetAmountExecutors_Call {
	return &DittoEntryPoint_GetAmountExecutors_Call{Call: _e.mock.On("GetAmountExecutors", ctx)}
}

func (_c *DittoEntryPoint_GetAmountExecutors_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_GetAmountExecutors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_GetAmountExecutors_Call) Return(_a0 *big.Int, _a1 error) *DittoEntryPoint_GetAmountExecutors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_GetAmountExecutors_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *DittoEntryPoint_GetAmountExecutors_Call {
	_c.Call.Return(run)
	return _c
}

// GetSucceededWorkflows provides a mock function with given fields: logs
func (_m *DittoEntryPoint) GetSucceededWorkflows(logs []*types.Log) ([]models.Workflow, error) {
	ret := _m.Called(logs)

	if len(ret) == 0 {
		panic("no return value specified for GetSucceededWorkflows")
	}

	var r0 []models.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func([]*types.Log) ([]models.Workflow, error)); ok {
		return rf(logs)
	}
	if rf, ok := ret.Get(0).(func([]*types.Log) []models.Workflow); ok {
		r0 = rf(logs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func([]*types.Log) error); ok {
		r1 = rf(logs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_GetSucceededWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSucceededWorkflows'
type DittoEntryPoint_GetSucceededWorkflows_Call struct {
	*mock.Call
}

// GetSucceededWorkflows is a helper method to define mock.On call
//   - logs []*types.Log
func (_e *DittoEntryPoint_Expecter) GetSucceededWorkflows(logs interface{}) *DittoEntryPoint_GetSucceededWorkflows_Call {
	return &DittoEntryPoint_GetSucceededWorkflows_Call{Call: _e.mock.On("GetSucceededWorkflows", logs)}
}

func (_c *DittoEntryPoint_GetSucceededWorkflows_Call) Run(run func(logs []*types.Log)) *DittoEntryPoint_GetSucceededWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.Log))
	})
	return _c
}

func (_c *DittoEntryPoint_GetSucceededWorkflows_Call) Return(_a0 []models.Workflow, _a1 error) *DittoEntryPoint_GetSucceededWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_GetSucceededWorkflows_Call) RunAndReturn(run func([]*types.Log) ([]models.Workflow, error)) *DittoEntryPoint_GetSucceededWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// IsExecutor provides a mock function with given fields: ctx
func (_m *DittoEntryPoint) IsExecutor(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsExecutor")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_IsExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExecutor'
type DittoEntryPoint_IsExecutor_Call struct {
	*mock.Call
}

// IsExecutor is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DittoEntryPoint_Expecter) IsExecutor(ctx interface{}) *DittoEntryPoint_IsExecutor_Call {
	return &DittoEntryPoint_IsExecutor_Call{Call: _e.mock.On("IsExecutor", ctx)}
}

func (_c *DittoEntryPoint_IsExecutor_Call) Run(run func(ctx context.Context)) *DittoEntryPoint_IsExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DittoEntryPoint_IsExecutor_Call) Return(_a0 bool, _a1 error) *DittoEntryPoint_IsExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_IsExecutor_Call) RunAndReturn(run func(context.Context) (bool, error)) *DittoEntryPoint_IsExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidExecutor provides a mock function with given fields: ctx, blockNumber
func (_m *DittoEntryPoint) IsValidExecutor(ctx context.Context, blockNumber *big.Int) (bool, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for IsValidExecutor")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (bool, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) bool); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_IsValidExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidExecutor'
type DittoEntryPoint_IsValidExecutor_Call struct {
	*mock.Call
}

// IsValidExecutor is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber *big.Int
func (_e *DittoEntryPoint_Expecter) IsValidExecutor(ctx interface{}, blockNumber interface{}) *DittoEntryPoint_IsValidExecutor_Call {
	return &DittoEntryPoint_IsValidExecutor_Call{Call: _e.mock.On("IsValidExecutor", ctx, blockNumber)}
}

func (_c *DittoEntryPoint_IsValidExecutor_Call) Run(run func(ctx context.Context, blockNumber *big.Int)) *DittoEntryPoint_IsValidExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *DittoEntryPoint_IsValidExecutor_Call) Return(_a0 bool, _a1 error) *DittoEntryPoint_IsValidExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_IsValidExecutor_Call) RunAndReturn(run func(context.Context, *big.Int) (bool, error)) *DittoEntryPoint_IsValidExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// RunMultipleWorkflows provides a mock function with given fields: ctx, workflows, estimatedGasMultiplier
func (_m *DittoEntryPoint) RunMultipleWorkflows(ctx context.Context, workflows []models.Workflow, estimatedGasMultiplier float64) (*types.Transaction, error) {
	ret := _m.Called(ctx, workflows, estimatedGasMultiplier)

	if len(ret) == 0 {
		panic("no return value specified for RunMultipleWorkflows")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workflow, float64) (*types.Transaction, error)); ok {
		return rf(ctx, workflows, estimatedGasMultiplier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workflow, float64) *types.Transaction); ok {
		r0 = rf(ctx, workflows, estimatedGasMultiplier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Workflow, float64) error); ok {
		r1 = rf(ctx, workflows, estimatedGasMultiplier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_RunMultipleWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunMultipleWorkflows'
type DittoEntryPoint_RunMultipleWorkflows_Call struct {
	*mock.Call
}

// RunMultipleWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - workflows []models.Workflow
//   - estimatedGasMultiplier float64
func (_e *DittoEntryPoint_Expecter) RunMultipleWorkflows(ctx interface{}, workflows interface{}, estimatedGasMultiplier interface{}) *DittoEntryPoint_RunMultipleWorkflows_Call {
	return &DittoEntryPoint_RunMultipleWorkflows_Call{Call: _e.mock.On("RunMultipleWorkflows", ctx, workflows, estimatedGasMultiplier)}
}

func (_c *DittoEntryPoint_RunMultipleWorkflows_Call) Run(run func(ctx context.Context, workflows []models.Workflow, estimatedGasMultiplier float64)) *DittoEntryPoint_RunMultipleWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Workflow), args[2].(float64))
	})
	return _c
}

func (_c *DittoEntryPoint_RunMultipleWorkflows_Call) Return(_a0 *types.Transaction, _a1 error) *DittoEntryPoint_RunMultipleWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_RunMultipleWorkflows_Call) RunAndReturn(run func(context.Context, []models.Workflow, float64) (*types.Transaction, error)) *DittoEntryPoint_RunMultipleWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// SetDelegatedSigner provides a mock function with given fields: ctx, signerAddress
func (_m *DittoEntryPoint) SetDelegatedSigner(ctx context.Context, signerAddress string) (*types.Transaction, error) {
	ret := _m.Called(ctx, signerAddress)

	if len(ret) == 0 {
		panic("no return value specified for SetDelegatedSigner")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Transaction, error)); ok {
		return rf(ctx, signerAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Transaction); ok {
		r0 = rf(ctx, signerAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, signerAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_SetDelegatedSigner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDelegatedSigner'
type DittoEntryPoint_SetDelegatedSigner_Call struct {
	*mock.Call
}

// SetDelegatedSigner is a helper method to define mock.On call
//   - ctx context.Context
//   - signerAddress string
func (_e *DittoEntryPoint_Expecter) SetDelegatedSigner(ctx interface{}, signerAddress interface{}) *DittoEntryPoint_SetDelegatedSigner_Call {
	return &DittoEntryPoint_SetDelegatedSigner_Call{Call: _e.mock.On("SetDelegatedSigner", ctx, signerAddress)}
}

func (_c *DittoEntryPoint_SetDelegatedSigner_Call) Run(run func(ctx context.Context, signerAddress string)) *DittoEntryPoint_SetDelegatedSigner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DittoEntryPoint_SetDelegatedSigner_Call) Return(_a0 *types.Transaction, _a1 error) *DittoEntryPoint_SetDelegatedSigner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_SetDelegatedSigner_Call) RunAndReturn(run func(context.Context, string) (*types.Transaction, error)) *DittoEntryPoint_SetDelegatedSigner_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateMutlipleWorkflows provides a mock function with given fields: ctx, workflows
func (_m *DittoEntryPoint) SimulateMutlipleWorkflows(ctx context.Context, workflows []models.Workflow) ([]bool, error) {
	ret := _m.Called(ctx, workflows)

	if len(ret) == 0 {
		panic("no return value specified for SimulateMutlipleWorkflows")
	}

	var r0 []bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workflow) ([]bool, error)); ok {
		return rf(ctx, workflows)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workflow) []bool); ok {
		r0 = rf(ctx, workflows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Workflow) error); ok {
		r1 = rf(ctx, workflows)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DittoEntryPoint_SimulateMutlipleWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateMutlipleWorkflows'
type DittoEntryPoint_SimulateMutlipleWorkflows_Call struct {
	*mock.Call
}

// SimulateMutlipleWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - workflows []models.Workflow
func (_e *DittoEntryPoint_Expecter) SimulateMutlipleWorkflows(ctx interface{}, workflows interface{}) *DittoEntryPoint_SimulateMutlipleWorkflows_Call {
	return &DittoEntryPoint_SimulateMutlipleWorkflows_Call{Call: _e.mock.On("SimulateMutlipleWorkflows", ctx, workflows)}
}

func (_c *DittoEntryPoint_SimulateMutlipleWorkflows_Call) Run(run func(ctx context.Context, workflows []models.Workflow)) *DittoEntryPoint_SimulateMutlipleWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Workflow))
	})
	return _c
}

func (_c *DittoEntryPoint_SimulateMutlipleWorkflows_Call) Return(_a0 []bool, _a1 error) *DittoEntryPoint_SimulateMutlipleWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DittoEntryPoint_SimulateMutlipleWorkflows_Call) RunAndReturn(run func(context.Context, []models.Workflow) ([]bool, error)) *DittoEntryPoint_SimulateMutlipleWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// NewDittoEntryPoint creates a new instance of DittoEntryPoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDittoEntryPoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *DittoEntryPoint {
	mock := &DittoEntryPoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
