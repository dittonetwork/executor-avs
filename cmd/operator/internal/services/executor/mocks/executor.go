// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Executor is an autogenerated mock type for the executor type
type Executor struct {
	mock.Mock
}

type Executor_Expecter struct {
	mock *mock.Mock
}

func (_m *Executor) EXPECT() *Executor_Expecter {
	return &Executor_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: ctx
func (_m *Executor) Activate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type Executor_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Executor_Expecter) Activate(ctx interface{}) *Executor_Activate_Call {
	return &Executor_Activate_Call{Call: _e.mock.On("Activate", ctx)}
}

func (_c *Executor_Activate_Call) Run(run func(ctx context.Context)) *Executor_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Executor_Activate_Call) Return(_a0 error) *Executor_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executor_Activate_Call) RunAndReturn(run func(context.Context) error) *Executor_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function with given fields: ctx
func (_m *Executor) Deactivate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type Executor_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Executor_Expecter) Deactivate(ctx interface{}) *Executor_Deactivate_Call {
	return &Executor_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx)}
}

func (_c *Executor_Deactivate_Call) Run(run func(ctx context.Context)) *Executor_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Executor_Deactivate_Call) Return(_a0 error) *Executor_Deactivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executor_Deactivate_Call) RunAndReturn(run func(context.Context) error) *Executor_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, blockHash
func (_m *Executor) Handle(ctx context.Context, blockHash common.Hash) error {
	ret := _m.Called(ctx, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, blockHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Executor_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHash common.Hash
func (_e *Executor_Expecter) Handle(ctx interface{}, blockHash interface{}) *Executor_Handle_Call {
	return &Executor_Handle_Call{Call: _e.mock.On("Handle", ctx, blockHash)}
}

func (_c *Executor_Handle_Call) Run(run func(ctx context.Context, blockHash common.Hash)) *Executor_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *Executor_Handle_Call) Return(_a0 error) *Executor_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executor_Handle_Call) RunAndReturn(run func(context.Context, common.Hash) error) *Executor_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToNewBlocks provides a mock function with given fields: ctx
func (_m *Executor) SubscribeToNewBlocks(ctx context.Context) (chan *types.Header, ethereum.Subscription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToNewBlocks")
	}

	var r0 chan *types.Header
	var r1 ethereum.Subscription
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (chan *types.Header, ethereum.Subscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) chan *types.Header); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) ethereum.Subscription); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ethereum.Subscription)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Executor_SubscribeToNewBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToNewBlocks'
type Executor_SubscribeToNewBlocks_Call struct {
	*mock.Call
}

// SubscribeToNewBlocks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Executor_Expecter) SubscribeToNewBlocks(ctx interface{}) *Executor_SubscribeToNewBlocks_Call {
	return &Executor_SubscribeToNewBlocks_Call{Call: _e.mock.On("SubscribeToNewBlocks", ctx)}
}

func (_c *Executor_SubscribeToNewBlocks_Call) Run(run func(ctx context.Context)) *Executor_SubscribeToNewBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Executor_SubscribeToNewBlocks_Call) Return(_a0 chan *types.Header, _a1 ethereum.Subscription, _a2 error) *Executor_SubscribeToNewBlocks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Executor_SubscribeToNewBlocks_Call) RunAndReturn(run func(context.Context) (chan *types.Header, ethereum.Subscription, error)) *Executor_SubscribeToNewBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
